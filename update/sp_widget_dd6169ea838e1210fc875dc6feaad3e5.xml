<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function($scope, $rootScope, spUtil) {
	/* widget controller */
	var c = this;

	$rootScope.$on('selectNote', function(event,data) {
		// Call the server script and pass custom input
		c.server.get({
			action: 'getNote',
			noteId: $rootScope.noteId
		}).then(function(r) {
			c.data.title = r.data.note.title;
			c.data.note = r.data.note.note;
			c.data.noteId = r.data.note.sys_id;
		});
	});
	

	c.updateNote = function(updateType) {
		c.server.get({
			action: 'updateNote',
			noteId: c.data.noteId,
			noteBody: c.data.note,
			noteTitle: c.data.title
		}).then(function(r) {
			if(r) {
				$rootScope.$emit('updateNote', r);
				console.log("Response: ", r);
			} else {
				spUtil.addErrorMessage("This field can not be empty.")
			}
		});
	}
}

]]></client_script>
        <controller_as>c</controller_as>
        <css/>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>notes_body</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>Notes Body</name>
        <option_schema/>
        <public>false</public>
        <roles/>
        <script><![CDATA[(function() {
	/* populate the 'data' object */

	// input object is the data object received from the client scripts controller
	if (input && input.noteId) {
		var note = new GlideRecord('x_snc_createnotes_note');
		if (note.get(input.noteId)) {
			if (input.action == 'getNote') {
				// Create the data object to send to client script
				data.note = {};

				// this helper copies vals for the specified fields into the data param
				$sp.getRecordValues(data.note, note, "title, note, sys_id");
			} else if (input.action == 'updateNote') {
				note.title = input.noteTitle;
				note.note = input.noteBody;
				note.update();
			}
		}
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2024-11-26 12:14:44</sys_created_on>
        <sys_id>dd6169ea838e1210fc875dc6feaad3e5</sys_id>
        <sys_mod_count>15</sys_mod_count>
        <sys_name>Notes Body</sys_name>
        <sys_package display_value="CreateNotes" source="x_snc_createnotes">df5fd9a5090232007f44e1046c8ff69f</sys_package>
        <sys_policy/>
        <sys_scope display_value="CreateNotes">df5fd9a5090232007f44e1046c8ff69f</sys_scope>
        <sys_update_name>sp_widget_dd6169ea838e1210fc875dc6feaad3e5</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2024-11-26 16:27:29</sys_updated_on>
        <template><![CDATA[<div class="panel panel-default" ng-show="c.data.noteId">
  <div class="panel-heading clearfix">
    <div class="row">
      <div class="col-md-12">
        <input class="form-control" id="note-title" ng-model="c.data.title" ng-change="c.updateNote('title')" ng-model-options="{debounce: 1000}"/>
      </div>
    </div>
  </div>
  <div class="panel-body">
    <textarea class="form-control" id="note-body" ng-model="c.data.note" ng-change="c.updateNote('body')" ng-model-options="{debounce: 1000}")></textarea>
  </div>
</div>

<!-- 
Explanation of the relationships between the AngularJS directives in the provided code:

1. `ng-show="c.data.noteID"`:
   - This directive determines whether the entire panel (the `<div>` with class `panel panel-default`) is visible. 
   - If `c.data.noteID` evaluates to a truthy value, the panel is displayed. Otherwise, it is hidden.
   - This binds the visibility of the panel to the existence or validity of the `noteID` property in the `c.data` object.

2. `ng-model="c.data.title"` (on the `<input>` element with id `note-title`):
   - This directive creates a two-way data binding between the input field's value and the `title` property of the `c.data` object.
   - Any changes in the input field's value update `c.data.title`, and vice versa.

3. `ng-model="c.data.note"` (on the `<textarea>` element with id `note-body`):
   - Similar to the `ng-model` directive above, this binds the value of the text area to the `note` property of the `c.data` object.
   - Updates in the text area's content will reflect in `c.data.note`, and changes in `c.data.note` will update the text area's displayed content.

Overall:
- The `ng-show` directive controls the visibility of the panel based on the presence of a `noteID` in `c.data`.
- The `ng-model` directives inside the panel ensure real-time synchronization of user input with the `title` and `note` properties of `c.data`.
- Together, these directives enable a dynamic, interactive UI where the panel only appears if a `noteID` is present, and any modifications to the `title` or `note` are automatically saved in the associated AngularJS model (`c.data`).
-->
]]></template>
    </sp_widget>
</record_update>
